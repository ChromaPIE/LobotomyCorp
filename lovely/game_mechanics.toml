[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# Game ends at below 0 hands instead of 1
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if G.GAME.chips - G.GAME.blind.chips >= 0 or G.GAME.current_round.hands_left < 1 then"
position = "at"
payload = "if to_big(G.GAME.chips) >= to_big(G.GAME.blind.chips) or G.GAME.current_round.hands_left <= 0 then"
match_indent = true

# Patches taken from Cryptid
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "elseif G.GAME.round_resets.blind == G.P_BLINDS.bl_big then"
position = "at"
payload = "elseif G.GAME.blind_on_deck == 'Big' then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.blind == G.P_BLINDS.bl_small then"
position = "at"
payload = "if G.GAME.blind_on_deck == 'Small' then"
match_indent = true

# Remove skipping for Ordeals
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "extras = create_UIBox_blind_tag(type, run_info)"
position = "at"
payload = '''
if not blind_choice.config.color and not G.GAME.modifiers.lobc_netzach then
    extras = create_UIBox_blind_tag(type, run_info)
end'''
match_indent = true

# Override Steamodded's challenges unlock all
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "challenge_list[#challenge_list+1] ="
position = "before"
payload = '''
if v.mod and v.mod.id == "LobotomyCorp" then
    if v.unlocked and type(v.unlocked) == 'function' then
        challenge_unlocked = v:unlocked()
    elseif type(v.unlocked) == 'boolean' then
        challenge_unlocked = v.unlocked
    end
end'''
match_indent = true

# Fix background crashing for non-bosses
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.boss.showdown then"
position = "at"
payload = "if v.boss and v.boss.showdown then"
match_indent = true

# For "Hands and Discards do not reset" effects
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)"
position = "before"
payload = "if not G.GAME.lobc_no_hands_reset then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))"
position = "after"
payload = '''
    if G.GAME.modifiers.lobc_netzach then
        G.GAME.current_round.hands_left = G.GAME.current_round.hands_left - (G.GAME.round_resets.ante > 6 and 2 or (G.GAME.round_resets.ante > 3 and 1 or 0))
        G.GAME.current_round.discards_left = G.GAME.current_round.discards_left - (G.GAME.round_resets.ante > 6 and 2 or (G.GAME.round_resets.ante > 3 and 1 or 0))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)"
position = "before"
payload = "if not G.GAME.lobc_no_hands_reset or (G.GAME.lobc_no_hands_reset and G.GAME.round_resets.blind_states.Small ~= 'Defeated') then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))"
position = "after"
payload = '''
    if G.GAME.modifiers.lobc_netzach then
        G.GAME.current_round.hands_left = G.GAME.current_round.hands_left - (G.GAME.round_resets.ante > 6 and 2 or (G.GAME.round_resets.ante > 3 and 1 or 0))
        G.GAME.current_round.discards_left = G.GAME.current_round.discards_left - (G.GAME.round_resets.ante > 6 and 2 or (G.GAME.round_resets.ante > 3 and 1 or 0))
    end
end'''
match_indent = true

# Patch G.LANG so i can change the font at will
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.LANG = self.LANGUAGES[self.SETTINGS.language] or self.LANGUAGES['en-us']"
position = "at"
payload = "self.LANG = copy_table(self.LANGUAGES[self.SETTINGS.language] or self.LANGUAGES['en-us'])"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.T, config={ref_table = G.GAME, ref_value = 'chips_text', lang = G.LANGUAGES['en-us'], scale = 0.85, colour = G.C.WHITE, id = 'chip_UI_count', func = 'chip_UI_set', shadow = true}}"
position = "at"
payload = "{n=G.UIT.T, config={ref_table = G.GAME, ref_value = 'chips_text', font = (G.GAME.modifiers.lobc_yesod and G.GAME.round_resets.ante > 6) and G.FONTS['blank'] or G.LANGUAGES['en-us'].font, scale = 0.85, colour = G.C.WHITE, id = 'chip_UI_count', func = 'chip_UI_set', shadow = true}}"
match_indent = true

# Fairy Festival
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.CONTROLLER:snap_to({node = G.shop:get_UIE_by_ID('next_round_button')})"
position = "before"
payload = '''
-- shop cards don't save card.ability.... lame
if not shop_exists and not nosave_shop and next(SMODS.find_card("j_lobc_fairy_festival")) then
    local shop_items = {}
    for _, area in pairs(G.I.CARDAREA) do
        if area.config.type == 'shop' then
            for _, item in pairs(area.cards) do
                if item.ability and item.ability.set ~= "Voucher" and item.cost > 1 then
                    shop_items[#shop_items+1] = item
                end
            end
        end
    end

    if #shop_items > 0 then
        local selected_card = pseudorandom_element(shop_items, pseudoseed("fairy_festival"))
        selected_card.ability.lobc_fairy_festival = true
        selected_card.children.lobc_fairy_particles = Particles(0, 0, 0,0, {
            timer = 0.05,
            scale = 0.25,
            speed = 0.75,
            lifespan = 1.5,
            attach = selected_card,
            colours = {G.C.GREEN, darken(G.C.GREEN, 0.2), darken(G.C.GREEN, 0.4)},
            fill = true
        })
        selected_card:set_cost()
    end
end'''
match_indent = true
[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# Game ends at below 0 hands instead of 1
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if G.GAME.chips - G.GAME.blind.chips >= 0 or G.GAME.current_round.hands_left < 1 then"
position = "at"
payload = "if to_big(G.GAME.chips) >= to_big(G.GAME.blind.chips) or G.GAME.current_round.hands_left <= 0 then"
match_indent = true

# Patches taken from Cryptid
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "elseif G.GAME.round_resets.blind == G.P_BLINDS.bl_big then"
position = "at"
payload = "elseif G.GAME.blind_on_deck == 'Big' then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.blind == G.P_BLINDS.bl_small then"
position = "at"
payload = "if G.GAME.blind_on_deck == 'Small' then"
match_indent = true

# Remove skipping for Ordeals
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "extras = create_UIBox_blind_tag(type, run_info)"
position = "at"
payload = '''
if not blind_choice.config.color then
    extras = create_UIBox_blind_tag(type, run_info)
end'''
match_indent = true

# Override Steamodded's challenges unlock all
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "challenge_list[#challenge_list+1] ="
position = "before"
payload = '''
if v.mod and v.mod.id == "LobotomyCorp" then
    if v.unlocked and type(v.unlocked) == 'function' then
        challenge_unlocked = v:unlocked()
    elseif type(v.unlocked) == 'boolean' then
        challenge_unlocked = v.unlocked
    end
end'''
match_indent = true

# Fix background crashing for non-bosses
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.boss.showdown then"
position = "at"
payload = "if v.boss and v.boss.showdown then"
match_indent = true

# For "Hands and Discards do not reset" effects
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)"
position = "before"
payload = "if not G.GAME.lobc_no_hands_reset then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))"
position = "before"
payload = "after"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)"
position = "before"
payload = "if not G.GAME.lobc_no_hands_reset then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))"
position = "after"
payload = "end"
match_indent = true

